############################################

# This is the new "log4j.properties" file  #

############################################



# This file should be deployed to the "root folder" of your application,

#   e.g. /java/bin/apache-tomcat-6.0.14/webapps/YOUR-WEBAPP-FOLDER-NAME/WEB-INF/classes

#   or   /java/daemon/mx-POS-Daemon

# If you do this, then the log4j subsystem will automatically find it, and initialise itself from there.




# There are notes spread thoughout this file, to assist in customising it for your application.

# Please note: 

#   If you do not understand the purpose of a particular line or setting,

#   DO NOT just delete it -- rather ask!  Some of the settings are quite subtle, and not obvious.




# Customise the following 2 lines (log.dir= and log.file=) as follows:

# For web apps under Tomcat, log.dir= should be ${catalina.base}/logs

# For java daemons, log.dir= should be /java/daemon/mx-POS-Daemon (e.g. log.dir=/java/daemon/mx-Campaign-Daemon)

# log.file= should be the name of the log file, e.g. log.file=RBMS.log or log.file=Campaign-Daemon.log



#log.dir=C:\_store for crimore\HotelBookingApp\log

#log.file=HotelBookingApp.log




# Decide if you want to include logging to Linux's stdout (check the existing log4j.rootLogger= entry).

# If you want to include logging to stdout, then the following line should read:

#   log4j.rootLogger=debug, stdout, FILE

# If you DO NOT want to include logging to stdout, then the following line should read, and the "log4j.appender.stdout" lines lower down should be removed:

#   log4j.rootLogger=debug, FILE

# Note the the value immediately after the "=" represents the minimum level that will be logged.

# If it is debug, then everything will be logged. If it is info, then only info, warn, error and fatal will be logged.



log4j.rootLogger= info, stdout





# This is the ONLY pattern that you should edit

# Examples of strings that you may want to use, are:

# pattern.custom=%d{${datestamp}} | %-5p | [%t] | %x | %-c | %m%n

# pattern.custom=%d{${datestamp}} | %-5p | [%t] | %x | %F:%L | %-c | %m%n



pattern.custom=%d{${datestamp}} | %-5p | [%t] | %x | %-c | %m%n





# These settings should NOT be edited

datestamp=yyyy-MM-dd_HH:mm:ss.SSS/zzz

roll.pattern.hourly=.yyyy-MM-dd.HH

roll.pattern.daily=.yyyy-MM-dd

pattern.std.console =%d %5p [%t] (%F:%L) - %m%n

pattern.std.compact =%d{${datestamp}} | %-5p | [%-10.10t] | %x | %-20.20c | %m%n

pattern.std.medium  =%d{${datestamp}} | %-5p | [%-15.15t] | %x | %-25.25c | %m%n

pattern.std.detailed=%d{${datestamp}} | %-5p | [%-15.15t] | %x | %-50.50c | %m%n


log4j.reset=true





# the "log4j.appender.stdout" settings are for outputting to Linux's stdout

#log4j.appender.stdout=org.apache.log4j.ConsoleAppender

#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# set .....ConversionPattern=${pattern.std.***}, or ${pattern.custom}

#log4j.appender.stdout.layout.ConversionPattern=${pattern.std.console}





# The "log4j.appender.FILE" settings are for outputting to the file defined above as "log.dir"/"log.file"

# Each day, the previous day's file will be renamed from "log.file" to "log.file.YYYY-MM-DD" (e.g. RBMS.log.2009-03-08)


#log4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender

#log4j.appender.FILE.DatePattern=${roll.pattern.hourly}

#log4j.appender.FILE.File=${log.dir}/${log.file}

#log4j.appender.FILE.Append=true

#log4j.appender.FILE.layout=org.apache.log4j.PatternLayout

# set .....ConversionPattern=${pattern.std.***}, or ${pattern.custom}

#log4j.appender.FILE.layout.ConversionPattern=${pattern.custom}

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.conversionPattern=[%p,%c{1},%t] %m%n





#################################################################################

#################################################################################

#################################################################################



# Below here, you should paste the original contents of your log4j.properties file,

# with each line preceded by a few (perhaps 5) # signs.

# In this way, the original contents of your log4j.properties file are still available for reference.

# In due course, this portion can be deleted, to clean up the file.



# e.g.:

#####  

#####  # ***** Set root logger level to WARN and its two appenders to stdout and R.

#####  log4j.rootLogger=info, stdout, R

#####  

#####  # ***** stdout is set to be a ConsoleAppender.

#####  log4j.appender.stdout=org.apache.log4j.ConsoleAppender

#####  # ***** stdout uses PatternLayout.

#####  log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

#####  # ***** Pattern to output the caller's file name and line number.

#####  log4j.appender.stdout.layout.ConversionPattern=%d %5p [%t] (%F:%L) - %m%n

#####  

#####  # ***** R is set to be a RollingFileAppender.

#####  log4j.appender.R=org.apache.log4j.RollingFileAppender

#####  log4j.appender.R.File=${catalina.base}/logs/USSD-QueueProcessor.log

#####  # ***** Max file size is set to 100KB

#####  log4j.appender.R.MaxFileSize=5120KB

#####  # ***** Keep one backup file

#####  log4j.appender.R.MaxBackupIndex=1

#####  # ***** R uses PatternLayout.

#####  log4j.appender.R.layout=org.apache.log4j.PatternLayout

#####  log4j.appender.R.layout.ConversionPattern=%d %p %t %c - %m%n

